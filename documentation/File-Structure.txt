# CivIQ Platform File Structure Guide

## Overview
CivIQ is a civic discourse platform designed to foster quality political discussion while avoiding the pitfalls of traditional social media (echo chambers, misinformation, outrage algorithms). This document outlines the complete file structure of the CivIQ codebase for development reference.

## Root Structure
The project is organized into these top-level directories:

```
CivIQ/
├── src/                # Source code
├── docs/               # Documentation
├── tests/              # Testing
├── scripts/            # Helper scripts and utilities
├── config/             # Configuration files
├── public/             # Public assets
├── kubernetes/         # Kubernetes deployment configs
└── docker/             # Docker configurations
```

## Source Code Organization
The `src` directory contains all application code, divided into these major sections:

```
src/
├── frontend/          # Frontend application
├── backend/           # Backend services
├── shared/            # Shared code between frontend and backend
├── mobile/            # Mobile app code
├── scripts/           # Build scripts
└── workers/           # Background workers
```

## Frontend Structure
Frontend code is organized as follows:

```
frontend/
├── components/        # React components
├── pages/             # Page components
├── hooks/             # Custom React hooks
├── context/           # React context providers
├── styles/            # CSS/SCSS styles
├── utils/             # Utility functions
├── assets/            # Static assets
├── public/            # Public assets
├── services/          # Frontend services
├── state/             # State management
├── types/             # TypeScript type definitions
└── locales/           # Internationalization files
```

## Backend Structure
The backend is organized by service and functionality:

```
backend/
├── api/               # API endpoints
├── services/          # Business logic services
├── models/            # Data models
├── repositories/      # Data access
├── middleware/        # Request middleware
├── utils/             # Utility functions
├── config/            # Server configurations
├── jobs/              # Background jobs
├── migrations/        # Database migrations
├── seeds/             # Database seed data
├── types/             # TypeScript type definitions
└── security/          # Security-related code
```

## Launch-Critical Features
The following service directories contain code for launch-critical features:

### 1. Algorithm Service
Path: `src/backend/services/algorithm/`

This service powers CivIQ's content ranking system, avoiding typical social media pitfalls like engagement-driven virality and echo chambers.

```
algorithm/
├── ranking/           # Core ranking logic
├── credibility/       # Credibility weighting system
├── engagement/        # Engagement scoring
├── moderation/        # Content moderation integration
├── diversityEngine/   # Viewpoint diversity engine
├── timeDecay/         # Time decay factors
└── transparency/      # Algorithm transparency tools
```

### 2. Moderation System
Path: `src/backend/services/moderation/`

Handles content moderation, comment nesting, and civility enforcement.

```
moderation/
├── ai/                # AI moderation tools
├── human/             # Human moderation interfaces
├── flags/             # User flagging system
├── appeals/           # Appeals process
├── metrics/           # Moderation metrics and analysis
├── rules/             # Moderation rules engine
└── civilityScore/     # Civility scoring system
```

### 3. Identity Verification
Path: `src/backend/services/identity/`

Ensures real users while allowing anonymity for high-risk individuals.

```
identity/
├── verification/      # Identity verification methods
├── privacy/           # Privacy controls
├── cryptographic/     # Cryptographic proof systems
├── federated/         # Federated identity support
├── anonymity/         # Enhanced anonymity for high-risk users
├── webOfTrust/        # Web of Trust model
└── appeals/           # Appeals and exceptions handling
```

### 4. Bot Detection
Path: `src/backend/services/botDetection/`

Prevents bot accounts and coordinated manipulation.

```
botDetection/
├── detection/         # Bot detection algorithms
├── prevention/        # Bot prevention strategies
├── behaviorAnalysis/  # User behavior analysis
├── brigading/         # Anti-brigading tools
├── verification/      # Account verification
├── metrics/           # Bot metrics and reporting
└── appeals/           # False positive handling
```

### 5. Content Services
Path: `src/backend/services/content/`

Manages different post types and decentralized content storage.

```
content/
├── textPosts/         # Text post handling
├── longForm/          # Long-form article handling
├── media/             # Video and photo content
├── storage/           # Content storage systems
├── ipfs/              # IPFS integration
├── arweave/           # Arweave integration
└── conventional/      # Conventional storage fallback
```

### 6. User Profiles
Path: `src/backend/services/profiles/`

Handles user profile data and management.

```
profiles/
├── core/              # Core profile functionality
├── bio/               # User bio handling
├── photos/            # Profile photo handling
├── export/            # Data export tools
├── portability/       # Data portability tools
├── privacy/           # Privacy controls
├── settings/          # User settings
└── badges/            # User badges system
```

### 7. Feed System
Path: `src/backend/services/feed/`

Powers the content feed, prioritizing quality over virality.

```
feed/
├── core/              # Core feed functionality
├── ranking/           # Content ranking
├── viewpointDiversity/# Viewpoint diversity tools
├── personalizations/  # Feed personalization
├── filtering/         # Content filtering
├── recommendations/   # Content recommendations
└── antiRadicalization/# Anti-radicalization systems
```

### 8. Community Moderation
Path: `src/backend/services/communityModeration/`

Enables user-driven moderation tools.

```
communityModeration/
├── tools/             # Moderation tools
├── delegation/        # Delegation system
├── voting/            # Community voting
├── reputation/        # Reputation systems
├── appeals/           # Appeals process
├── metrics/           # Moderation metrics
└── training/          # Moderator training materials
```

### 9. Secure Messaging
Path: `src/backend/services/messaging/`

Provides end-to-end encrypted messaging capabilities.

```
messaging/
├── core/              # Core messaging functionality
├── encryption/        # E2E encryption
├── ephemeral/         # Ephemeral messaging
├── storage/           # Message storage
├── groups/            # Group messaging
├── notifications/     # Message notifications
└── moderation/        # Message moderation
```

### 10. Payments & Donations
Path: `src/backend/services/payments/`

Manages cryptocurrency payments and donation processing.

```
payments/
├── core/              # Core payment functionality
├── crypto/            # Cryptocurrency payments
├── btcpayserver/      # BTCPayServer integration
├── bitcoin/           # Bitcoin support
├── monero/            # Monero support
├── ethereum/          # Ethereum support
├── subscriptions/     # Subscription management
└── donations/         # Donation handling
```

### 11. Censorship Resistance
Path: `src/backend/services/censorship/`

Ensures platform remains accessible despite censorship attempts.

```
censorship/
├── decentralizedHosting/ # Decentralized hosting infrastructure
├── ipfs/              # IPFS integration
├── arweave/           # Arweave integration
├── tor/               # Tor (.onion) integration
├── i2p/               # I2P (.i2p) integration
├── ens/               # ENS domains
├── handshake/         # Handshake domains
├── mirrorSites/       # Mirror site management
└── backups/           # Backup systems
```

## Soon-After-Launch Features
These directories are placeholders for planned features to be implemented after initial launch:

```
src/backend/services/
├── factChecking/      # Fact-checking system
├── badges/            # Expert & journalist badges
├── advertisements/    # Advertisement system
├── reactions/         # Advanced reaction system
├── search/            # Search functionality
├── analytics/         # System analytics
├── notifications/     # User notifications
├── federatedAuth/     # Federated authentication
├── webOfTrust/        # Web of trust verification
├── transparency/      # Post visibility transparency
├── dataPortability/   # Portable data & backups
└── privacyMode/       # Optional privacy mode
```

## Key Configuration Files
Important configuration files include:

```
config/
├── database.config.js
├── algorithm.config.js
├── moderation.config.js
├── security.config.js
└── censorship.config.js
```

## Deployment Configuration
Deployment is configured through:

```
docker/
└── docker-compose.yml

kubernetes/
└── deployment.yaml
```

## Key Application Entry Points

```
src/frontend/index.js  # Frontend application entry point
src/backend/index.js   # Backend application entry point
```

This structure supports CivIQ's mission to create a civic discourse platform that prioritizes quality content, prevents echo chambers and misinformation, and remains resistant to censorship while fostering meaningful political dialogue.